<?xml version="1.0"?>
<RBProject version="2009r5.1">
<block type="Module" ID="905872901">
 <ObjName>ProgressDelegateKFS</ObjName>
 <ObjContainerID>202574370</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility>true</Compatibility>
 <Method>
  <ItemName>DecimalValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function DecimalValue() As Double</SourceLine>
   <SourceLine>// Created 4/13/2009 by Andrew Keller</SourceLine>
   <SourceLine>// Modified 4/20/2009 --;</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// calculates the overall progress as a decimal in the interval [0,1]</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If myStackHeight = 0 Then Return 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim result As Double = 0</SourceLine>
   <SourceLine>Dim magnitude As Double = 1</SourceLine>
   <SourceLine>Dim row As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For row = myStackHeight -1 DownTo 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If myMaxes( row ) &gt; 0 Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = result + myValues( row ) / myMaxes( row ) * magnitude</SourceLine>
   <SourceLine>magnitude = magnitude / myMaxes( row )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return result</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>PushStack</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub PushStack()</SourceLine>
   <SourceLine>// Created 4/13/2009 by Andrew Keller</SourceLine>
   <SourceLine>// Modified 4/18/2009 --; now fires ProgressChanged more descriptively</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// pushes the stack</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myValues.Insert 0, 0</SourceLine>
   <SourceLine>myMaxes.Insert 0, 0</SourceLine>
   <SourceLine>myMsgs.Insert 0, ""</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myStackHeight = myStackHeight +1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If myStackHeight = 1 Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ProgressChanged True, True, True, True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ProgressChanged myValues( 0 ) &lt;&gt; myValues( 1 ), myMaxes( 0 ) &lt;&gt; myMaxes( 1 ), False, True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>PopStack</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub PopStack(autoIncrementValue As Boolean = False)</SourceLine>
   <SourceLine>// Created 4/13/2009 by Andrew Keller</SourceLine>
   <SourceLine>// Modified 4/18/2009 --; now fires ProgressChanged more descriptively</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// pops the stack</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim valc, maxc, msgc As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If myStackHeight &gt; 0 Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If myStackHeight &gt; 1 Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>valc = myValues( 0 ) &lt;&gt; myValues( 1 )</SourceLine>
   <SourceLine>maxc = myMaxes( 0 ) &lt;&gt; myMaxes( 1 )</SourceLine>
   <SourceLine>msgc = myMsgs( 0 ) &lt;&gt; "" And myMsgs( 0 ) &lt;&gt; myMsgs( 1 )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myValues.Remove 0</SourceLine>
   <SourceLine>myMaxes.Remove 0</SourceLine>
   <SourceLine>myMsgs.Remove 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myStackHeight = myStackHeight -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If myStackHeight &gt; 0 Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If autoIncrementValue Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myValues( 0 ) = myValues( 0 ) +1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ProgressChanged valc, maxc, msgc, True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>StackEmpied</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>autoIncrementValue As Boolean = False</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Maximum</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Maximum() As Int64</SourceLine>
   <SourceLine>// Created 4/13/2009 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// returns the maximum at the current level in the stack</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If myStackHeight &gt; 0 Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return myMaxes( 0 )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>Int64</ItemResult>
 </Method>
 <Method>
  <ItemName>Value</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Value() As Int64</SourceLine>
   <SourceLine>// Created 4/13/2009 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// returns the value at the current level of the stack</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If myStackHeight &gt; 0 Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return myValues( 0 )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>Int64</ItemResult>
 </Method>
 <Method>
  <ItemName>Message</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Message() As String</SourceLine>
   <SourceLine>// Created 4/13/2009 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// returns the current message at the current stack level</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// also note that if a message at a stack level is an empty string,</SourceLine>
   <SourceLine>// then the message in the previous stack level replaces it.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim row As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For row = 0 to myStackHeight -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If myMsgs( row ) &lt;&gt; "" Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return myMsgs( row )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return ""</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>Value</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Value(Assigns newValue As Int64)</SourceLine>
   <SourceLine>// Created 4/13/2009 by Andrew Keller</SourceLine>
   <SourceLine>// Modified 4/18/2009 --; now more efficient</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// sets a new value in the current level of the stack</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim valc As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If myStackHeight &gt; 0 Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>valc = myValues( 0 ) &lt;&gt; newValue</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If valc Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myValues( 0 ) = newValue</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ProgressChanged True, False, False, False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>Assigns newValue As Int64</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Message</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Message(Assigns newMessage As String)</SourceLine>
   <SourceLine>// Created 4/13/2009 by Andrew Keller</SourceLine>
   <SourceLine>// Modified 4/18/2009 --; now more efficient</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// sets the message at the current stack level</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim msgc As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If myStackHeight &gt; 0 Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>msgc = myMsgs( 0 ) &lt;&gt; newMessage</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If msgc Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myMsgs( 0 ) = newMessage</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ProgressChanged False, False, True, False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>Assigns newMessage As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Maximum</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Maximum(Assigns newValue As Int64)</SourceLine>
   <SourceLine>// Created 4/13/2009 by Andrew Keller</SourceLine>
   <SourceLine>// Modified 4/18/2009 --; now more efficient</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// sets a new maximum at the current stack level</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim maxc As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If myStackHeight &gt; 0 Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>maxc = myMaxes( 0 ) &lt;&gt; newValue</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If maxc Then </SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myMaxes( 0 ) = newValue</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ProgressChanged False, True, False, False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>Assigns newValue As Int64</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>// Created 4/13/2009 by Andrew Keller</SourceLine>
   <SourceLine>// Modified 12/28/2009 --;</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Basic constructor - just initialize things</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>AutoFlush = True</SourceLine>
   <SourceLine>UserPressedCancel = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myStackHeight = 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ReDim myMaxes( 0 )</SourceLine>
   <SourceLine>ReDim myMsgs( 0 )</SourceLine>
   <SourceLine>ReDim myValues( 0 )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myMaxes(0) = 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Flush</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Flush(valueChanged As Boolean = True, maxChanged As Boolean = True, messageChanged As Boolean = True, stackChanged As Boolean = True)</SourceLine>
   <SourceLine>// Created 4/13/2009 by Andrew Keller</SourceLine>
   <SourceLine>// Modified 4/18/2009 --; Calling function now has control over ProgressChanged arguments</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// fires the ProgressChanged event manually</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ProgressChanged valueChanged, maxChanged, messageChanged, stackChanged</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>valueChanged As Boolean = True, maxChanged As Boolean = True, messageChanged As Boolean = True, stackChanged As Boolean = True</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetValues</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetValues(value As Int64, max As Int64, msg As String)</SourceLine>
   <SourceLine>// Created 4/13/2009 by Andrew Keller</SourceLine>
   <SourceLine>// Modified 4/18/2009 --; now fires ProgressChanged more descriptively</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// sets multiple properties at once</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// this approach reduces the number of times ProgressChanged is called</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim valc, maxc, msgc As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If myStackHeight &gt; 0 Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>valc = myValues( 0 ) &lt;&gt; value</SourceLine>
   <SourceLine>maxc = myMaxes( 0 ) &lt;&gt; max</SourceLine>
   <SourceLine>msgc = msg &lt;&gt; Message</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If valc Or maxc Or msgc Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myValues( 0 ) = value</SourceLine>
   <SourceLine>myMaxes( 0 ) = max</SourceLine>
   <SourceLine>myMsgs( 0 ) = msg</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ProgressChanged valc, maxc, msgc, False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>value As Int64, max As Int64, msg As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetValues</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetValues(value As Int64, msg As String)</SourceLine>
   <SourceLine>// Created 4/13/2009 by Andrew Keller</SourceLine>
   <SourceLine>// Modified 4/18/2009 --; now fires ProgressChanged more descriptively</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// sets multiple properties at once</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// this approach reduces the number of times ProgressChanged is called</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim valc, msgc As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If myStackHeight &gt; 0 Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>valc = myValues( 0 ) &lt;&gt; value</SourceLine>
   <SourceLine>msgc = msg &lt;&gt; Message</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If valc Or msgc Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myValues( 0 ) = value</SourceLine>
   <SourceLine>myMsgs( 0 ) = msg</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ProgressChanged valc, False, msgc, False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>value As Int64, msg As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>PushStack</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub PushStack(newValue As Int64, newMax As Int64, newMsg As String = "")</SourceLine>
   <SourceLine>// Created 4/13/2009 by Andrew Keller</SourceLine>
   <SourceLine>// Modified 4/18/2009 --; now fires ProgressChanged more descriptively</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// pushes the stack, and also sets some default values</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// this approach reduces the number of times ProgressChanged is called</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myMaxes.Insert 0, newMax</SourceLine>
   <SourceLine>myMsgs.Insert 0, newMsg</SourceLine>
   <SourceLine>myValues.Insert 0, newValue</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myStackHeight = myStackHeight +1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If myStackHeight = 1 Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ProgressChanged True, True, True, True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ProgressChanged myValues( 0 ) &lt;&gt; myValues( 1 ), myMaxes( 0 ) &lt;&gt; myMaxes( 1 ), myMsgs( 0 ) &lt;&gt; "" And myMsgs( 0 ) &lt;&gt; myMsgs( 1 ), True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>newValue As Int64, newMax As Int64, newMsg As String = ""</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>StackHeight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function StackHeight() As Integer</SourceLine>
   <SourceLine>// Created 4/13/2009 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// returns the current height of the stack</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return myStackHeight</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Message</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Message(stackPosition As Integer) As String</SourceLine>
   <SourceLine>// Created 4/13/2009 by Andrew Keller</SourceLine>
   <SourceLine>// Modified 4/20/2009 --;</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// returns the current message at the current stack level</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// also note that if a message at a stack level is an empty string,</SourceLine>
   <SourceLine>// then the message in the previous stack level replaces it.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// BIG FAT NOTE: Although this class uses an inverted stack,</SourceLine>
   <SourceLine>// this function in particular implements behavior like a</SourceLine>
   <SourceLine>// normal stack.  This is because an inverted stack is not</SourceLine>
   <SourceLine>// exactly standard, and it is good that no code outside of</SourceLine>
   <SourceLine>// here ever gets the slightest hint of inconsistency.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Convert the input to the inverted stack equivalent</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim pos As Integer = myStackHeight - stackPosition -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// check for out of bounds</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If pos &gt;= myStackHeight Then Return ""</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// if too high, then pull down</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If pos &lt; 0 Then pos = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// find the first level at which a message is set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For row As Integer = pos To myStackHeight -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If myMsgs( row ) &lt;&gt; "" Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return myMsgs( row )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>stackPosition As Integer</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>SetValues</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetValues(value As Int64, max As Int64)</SourceLine>
   <SourceLine>// Created 4/20/2009 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// sets multiple properties at once</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// this approach reduces the number of times ProgressChanged is called</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim valc, maxc, msgc As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If myStackHeight &gt; 0 Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>valc = myValues( 0 ) &lt;&gt; value</SourceLine>
   <SourceLine>maxc = myMaxes( 0 ) &lt;&gt; max</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If valc Or maxc Or msgc Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myValues( 0 ) = value</SourceLine>
   <SourceLine>myMaxes( 0 ) = max</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ProgressChanged valc, maxc, False, False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>value As Int64, max As Int64</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Hook>
  <ItemName>ProgressChanged</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>valueChanged As Boolean, maxChanged As Boolean, messageChanged As Boolean, stackChanged As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>StackEmpied</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Property>
  <ItemName>UserPressedCancel</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>UserPressedCancel As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>UserPressedCancel As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>myMsgs()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>myMsgs() As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>myMsgs() As String</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>myValues()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>myValues() As Int64</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>myValues() As Int64</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>myMaxes()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>myMaxes() As Int64</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>myMaxes() As Int64</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>AutoFlush</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>AutoFlush As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>AutoFlush As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>myStackHeight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>myStackHeight As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>myStackHeight As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>userPressedCancel</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AutoFlush</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
</RBProject>
