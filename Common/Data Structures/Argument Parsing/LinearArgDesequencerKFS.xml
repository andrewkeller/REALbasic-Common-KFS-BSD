<?xml version="1.0"?>
<RBProject version="2010r1">
<block type="Module" ID="1813261460">
 <ObjName>LinearArgDesequencerKFS</ObjName>
 <ObjContainerID>687429512</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Parse</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine> Shared Function Parse(args() As String) As LinearArgDesequencerKFS</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Provides an additional syntax</SourceLine>
   <SourceLine>// for parsing an arguments array.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return args</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>1</Shared>
  <ItemParams>args() As String</ItemParams>
  <ItemResult>LinearArgDesequencerKFS</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Basic Constructor - Pretend as</SourceLine>
   <SourceLine>// if we have an empty args array.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim args( -1 ) As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Constructor( args )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Operator_Convert</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Operator_Convert(args() As String)</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Convert Constructor -</SourceLine>
   <SourceLine>// Ask the Standard Constructor to handle this.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Constructor args</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>args() As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(args() As String)</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Standard Constructor.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// First, initialize our variables</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myArgs = New Dictionary</SourceLine>
   <SourceLine>myLastErrorCode = 0</SourceLine>
   <SourceLine>myLastErrorMsg = ""</SourceLine>
   <SourceLine>myOrigArgs = args</SourceLine>
   <SourceLine>ReDim requiredArgIDs( -1 )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Next, load the specifications we are looking for.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>AddArgSpecifications</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Finally, parse the argument set.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Desequence_Core</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>args() As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>AddArgSpecifications</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AddArgSpecifications()</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Add argument specifications to this instance.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ArgSpecAdd kArgIDHelp, "h", "help", 0, False, False, True, "Help"</SourceLine>
   <SourceLine>ArgSpecAdd kArgIDVerbose, "v", "verbose", 0, True, False, "Increase Verbosity"</SourceLine>
   <SourceLine>ArgSpecAdd kArgIDAppVersion, "", "version", 0, False, False, True, "Print Version"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Add required arguments to requiredArgIDs.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'None...  Sample:</SourceLine>
   <SourceLine>'requiredArgIDs.Append kArgID_Some_Argument_ID</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Desequence_Core</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Desequence_Core()</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Primary Desequencing Function.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Initialize the current unbounded parcel</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim unboundedParcelKey As String = ""</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Initialize the queue of parcels.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim parcelQueue() As String = InitialParcelQueue</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Begin scanning the array.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim iWord, iLastWord As Integer = myOrigArgs.Ubound</SourceLine>
   <SourceLine>For iWord = 1 To iLastWord</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim arg As String = myOrigArgs( iWord )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If arg.Len &gt; 0 Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// The first character tells a lot.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim fc As String = arg.Left(1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If fc = "-" Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// This is an option argument.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If arg.Len &gt; 1 Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If arg.Mid( 2, 1 ) = "-" Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// This is a word-argument, AKA a switch.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Figure out which one it is.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim switch As String = arg.Mid( 3 )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim argID As String = GetArgIDForSwitch( switch )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If argID &lt;&gt; "" Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>GetArgObject( argID ).FoundTrigger parcelQueue, argID</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If GetArgObject( argID ).IsTerminal Then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// This is an unknown switch.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myLastErrorCode = kErrUndefinedTrigger</SourceLine>
   <SourceLine>myLastErrorMsg = "Unknown switch: '--" + switch + "'"</SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// This is a character-argument, AKA a flag.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For Each char As String In arg.Mid(2).Split("")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim argID As String = GetArgIDForFlag( char )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If argID &lt;&gt; "" Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>GetArgObject( argID ).FoundTrigger parcelQueue, argID</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If GetArgObject( argID ).IsTerminal Then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// This is an unknown flag.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myLastErrorCode = kErrUndefinedTrigger</SourceLine>
   <SourceLine>myLastErrorMsg = "Unknown flag: '-" + char + "'"</SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf parcelQueue.Ubound &gt; -1 Or unboundedParcelKey &lt;&gt; "" Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// We are expecting a parcel.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Which one?</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim which As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If parcelQueue.Ubound = -1 Then</SourceLine>
   <SourceLine>which = unboundedParcelKey</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>which = parcelQueue(0)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If which = "" Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myLastErrorCode = kErrUndefinedArgID</SourceLine>
   <SourceLine>myLastErrorMsg = "Internal Error: While assigning a parcel to an argument: the ID of an expected parcel is null."</SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Add this parcel to the correct bin in myArgs.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>GetArgObject( which ).FoundParcel arg</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Set the current unboundedParcelKey.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If GetArgObject( which ).IsUnbounded Then unboundedParcelKey = which</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Advance the queue.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>parcelQueue.Remove 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// This is an unexpected parcel.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myLastErrorCode = kErrUnexpectedParcel</SourceLine>
   <SourceLine>myLastErrorMsg = "Unexpected argument: '" + arg + "'"</SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// The queue had better be empty at this point.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If parcelQueue.Ubound &gt; -1 Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myLastErrorCode = kErrMissingParcel</SourceLine>
   <SourceLine>myLastErrorMsg = "Expected argument: " + GetArgObject(parcelQueue(0)).Name</SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetRelevantParcels</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetRelevantParcels(argID As String) As String()</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Returns only the relevant parcels found for this argument.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim argObject As LinearCLArgumentKFS = myArgs.Lookup( argID, Nil )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If argObject &lt;&gt; Nil Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return argObject.GetRelevantParcels</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim result( -1 ) As String</SourceLine>
   <SourceLine>Return result</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>argID As String</ItemParams>
  <ItemResult>String()</ItemResult>
 </Method>
 <Method>
  <ItemName>GetMostRelevantParcel</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetMostRelevantParcel(argID As String) As String</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Returns the most relevant parcel found for this argument.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim argObject As LinearCLArgumentKFS = myArgs.Lookup( argID, Nil )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If argObject &lt;&gt; Nil Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return argObject.GetMostRelevantParcel</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return ""</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>argID As String</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>LogicalVerbosity</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function LogicalVerbosity() As Integer</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Convenience function that returns the</SourceLine>
   <SourceLine>// verbosity level indicated by the arguments.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return GetTriggerCount( kArgIDVerbose )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>LogicalHelp</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function LogicalHelp() As Boolean</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Convenience function that returns</SourceLine>
   <SourceLine>// whether or not the user wants help.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return GetTriggerCount( kArgIDHelp ) &gt; 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>Error</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Error() As Boolean</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Returns whether or not this</SourceLine>
   <SourceLine>// instance has encountered an error.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return myLastErrorCode &lt;&gt; 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>ErrorCode</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ErrorCode() As Integer</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Returns the last error code of this instance.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return myLastErrorCode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>ErrorMessage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ErrorMessage() As String</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Returns the last error message of this instance.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return myLastErrorMsg</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>InitialParcelQueue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function InitialParcelQueue() As String()</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Generates and returns the initial parcel queue.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim result( -1 ) As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For index As Integer = requiredArgIDs.Ubound DownTo 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim argObject As LinearCLArgumentKFS = myArgs.Lookup( requiredArgIDs(index), Nil )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If argObject = Nil Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myLastErrorCode = kErrUndefinedArgID</SourceLine>
   <SourceLine>myLastErrorMsg = "Internal Error: While expanding the list of required arguments: Undefined argument ID"</SourceLine>
   <SourceLine>Return result</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For count As Integer = argObject.ParcelCount DownTo 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result.Insert 0, requiredArgIDs( index )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return result</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>String()</ItemResult>
 </Method>
 <Method>
  <ItemName>ArgSpecAdd</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ArgSpecAdd(id As String, flags As String, switch As String, parcelCount As Integer, isArray As Boolean, isUnbounded As Boolean, displayName As String)</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Adds the given information into the given argument specification.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim argObject As LinearCLArgumentKFS = MakeGetArgObject( id )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>argObject.AddFlags flags</SourceLine>
   <SourceLine>argObject.AddSwitches switch</SourceLine>
   <SourceLine>argObject.ParcelCount = parcelCount</SourceLine>
   <SourceLine>argObject.IsArray = isArray</SourceLine>
   <SourceLine>argObject.IsUnbounded = isUnbounded</SourceLine>
   <SourceLine>argObject.Name = displayName</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>id As String, flags As String, switch As String, parcelCount As Integer, isArray As Boolean, isUnbounded As Boolean, displayName As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ArgSpecRemove</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ArgSpecRemove(argID As String)</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Deletes the given argument specification.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If myArgs.HasKey( argID ) Then myArgs.Remove argID</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>argID As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ArgSpecAdd</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ArgSpecAdd(id As String, flags As String, ParamArray switches As String)</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Adds the given information into the given argument specification.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim argObject As LinearCLArgumentKFS = MakeGetArgObject( id )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>argObject.AddFlags flags</SourceLine>
   <SourceLine>argObject.AddSwitches switches</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>id As String, flags As String, ParamArray switches As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetParcelCount</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetParcelCount(argID As String) As Integer</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Returns the number of parcels found for this argument.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim argObject As LinearCLArgumentKFS = myArgs.Lookup( argID, Nil )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If argObject &lt;&gt; Nil Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return argObject.GetParcelCount</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>argID As String</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>GetTriggerCount</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetTriggerCount(argID As String) As Integer</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Returns the number of times this argument was triggered.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim argObject As LinearCLArgumentKFS = myArgs.Lookup( argID, Nil )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If argObject &lt;&gt; Nil Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return argObject.GetTriggerCount</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>argID As String</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>GetParcels</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetParcels(argID As String) As String()</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Returns the parcels found for this argument.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim argObject As LinearCLArgumentKFS = myArgs.Lookup( argID, Nil )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If argObject &lt;&gt; Nil Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return argObject.GetParcels</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim result( -1 ) As String</SourceLine>
   <SourceLine>Return result</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>argID As String</ItemParams>
  <ItemResult>String()</ItemResult>
 </Method>
 <Method>
  <ItemName>MakeGetArgObject</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function MakeGetArgObject(id As String) As LinearCLArgumentKFS</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Creates if necessary and returns the given argument specification.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim argObject As LinearCLArgumentKFS</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If myArgs.HasKey( id ) Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>argObject = myArgs.Value( id )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>argObject = New LinearCLArgumentKFS</SourceLine>
   <SourceLine>myArgs.Value( id ) = argObject</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return argObject</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>id As String</ItemParams>
  <ItemResult>LinearCLArgumentKFS</ItemResult>
 </Method>
 <Method>
  <ItemName>GetArgIDForSwitch</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetArgIDForSwitch(switch As String) As String</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Returns the argument ID that responds to the given switch.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For Each argID As String In myArgs.Keys</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Try</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If GetArgObject( argID ).HasSwitch( switch ) Then Return argID</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Catch</SourceLine>
   <SourceLine>End Try</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return ""</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>switch As String</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>GetArgIDForFlag</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetArgIDForFlag(flag As String) As String</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Returns the argument ID that responds to the given flag.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For Each argID As String In myArgs.Keys</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Try</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If GetArgObject( argID ).HasFlag( flag ) Then Return argID</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Catch</SourceLine>
   <SourceLine>End Try</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return ""</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>flag As String</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>GetAppExecutionString</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetAppExecutionString() As String</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Returns the string used to launch this program.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Try</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return myOrigArgs(0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Catch</SourceLine>
   <SourceLine>End Try</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return ""</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>GetArgObject</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetArgObject(id As String) As LinearCLArgumentKFS</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Returns the given argument specification.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return myArgs.Lookup( id, Nil )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>id As String</ItemParams>
  <ItemResult>LinearCLArgumentKFS</ItemResult>
 </Method>
 <Method>
  <ItemName>GetUsageMessage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetUsageMessage() As String</SourceLine>
   <SourceLine>// Created 1/4/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Returns a human-readable string including the flags</SourceLine>
   <SourceLine>// and display name of all loaded arguments.  Text</SourceLine>
   <SourceLine>// spacing is designed to work with fixed-width fonts.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim working() As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim argKeys() As Variant = myArgs.Keys</SourceLine>
   <SourceLine>Dim row, lastArg As Integer = argKeys.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If lastArg = -1 Then Return GetAppExecutionString</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ReDim working( lastArg )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Start with the program execution point.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim result As String = "Usage: " + GetAppExecutionString</SourceLine>
   <SourceLine>Dim defaultIndent As String = "    "</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Add the required parcels.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For Each key As String In requiredArgIDs</SourceLine>
   <SourceLine>For count As Integer = GetArgObject(key).ParcelCount DownTo 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = result + " " + key</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Now for the options.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For row = 0 To lastArg</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim flags As String = GetArgObject(argKeys(row)).Flags</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If flags = "" Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>working( row ) = defaultIndent</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>working( row ) = defaultIndent + "-" + flags</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If GetArgObject(argKeys(row)).Switches.Ubound = -1 Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>working( row ) = working( row ) + " "</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>working( row ) = working( row ) + ", "</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>MatchStringLengths working</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For row = 0 To lastArg</SourceLine>
   <SourceLine>For Each switch As String In GetArgObject(argKeys(row)).Switches</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>working( row ) = working( row ) + "--" + switch + "  "</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>MatchStringLengths working</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For row = 0 To lastArg</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>working( row ) = working( row ) + GetArgObject(argKeys(row)).Name</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If requiredArgIDs.IndexOf( argKeys(row) ) &gt; -1 Then _</SourceLine>
   <SourceLine>working( row ) = working( row ) + "  (" + argKeys(row) + ")"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return result + EndOfLine + EndOfLine + "Options:" + EndOfLine + Join( working, EndOfLine )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>LogicalAppVersion</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function LogicalAppVersion() As Boolean</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Convenience function that returns whether or</SourceLine>
   <SourceLine>// not the user wants to return the app's version.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return GetTriggerCount( kArgIDAppVersion ) &gt; 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>ArgSpecAdd</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ArgSpecAdd(id As String, flags As String, switch As String, parcelCount As Integer, isArray As Boolean, isUnbounded As Boolean, isTerminal As Boolean, displayName As String)</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Adds the given information into the given argument specification.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim argObject As LinearCLArgumentKFS = MakeGetArgObject( id )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>argObject.AddFlags flags</SourceLine>
   <SourceLine>argObject.AddSwitches switch</SourceLine>
   <SourceLine>argObject.ParcelCount = parcelCount</SourceLine>
   <SourceLine>argObject.IsArray = isArray</SourceLine>
   <SourceLine>argObject.IsUnbounded = isUnbounded</SourceLine>
   <SourceLine>argObject.IsTerminal = isTerminal</SourceLine>
   <SourceLine>argObject.Name = displayName</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>id As String, flags As String, switch As String, parcelCount As Integer, isArray As Boolean, isUnbounded As Boolean, isTerminal As Boolean, displayName As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>MatchStringLengths</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub MatchStringLengths(ByRef ary() As String)</SourceLine>
   <SourceLine>// Created 1/3/2010 by Andrew Keller</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Adds spaces to the shortest string in ary</SourceLine>
   <SourceLine>// until all elemens in ary are the same length.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim row, last As Integer = ary.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim maxLength As Integer = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For row = 0 To last</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>maxLength = Max( maxLength, ary(row).Len )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For row = 0 To last</SourceLine>
   <SourceLine>While ary(row).Len &lt; maxLength</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ary(row) = ary(row) + " "</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// done.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>ByRef ary() As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Note>
  <ItemName>Usage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>Usage</NoteLine>
   <NoteLine>This class takes an arguments array and converts it into</NoteLine>
   <NoteLine>logical ideas.  This way, you do not need to perform the</NoteLine>
   <NoteLine>mundane argument parsing yourself every time you write a</NoteLine>
   <NoteLine>command line program.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>If your program only needs to accept the help and verbose</NoteLine>
   <NoteLine>flags, then this class will work perfectly as-is.  If you</NoteLine>
   <NoteLine>need more than that, then you should subclass this class</NoteLine>
   <NoteLine>and add your additional flags and switches.  See the</NoteLine>
   <NoteLine>"Subclassing" note for more information.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>This class is immutable.  Once you ask this class to</NoteLine>
   <NoteLine>parse a set of arguments, you will get an instance of</NoteLine>
   <NoteLine>this class back, and you will never be able to modify</NoteLine>
   <NoteLine>the set of arguments that that instance parsed.  In</NoteLine>
   <NoteLine>order to parse a different set of arguments, you must</NoteLine>
   <NoteLine>create a new instance of this class that is set to parse</NoteLine>
   <NoteLine>your other set of arguments.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Upon initializing an instance of this class with a set</NoteLine>
   <NoteLine>of arguments, the instance is immediately able to tell</NoteLine>
   <NoteLine>you the results of the parsing process.  That's one</NoteLine>
   <NoteLine>line of code to create the instance, and you can</NoteLine>
   <NoteLine>immediately jump right into getting the results.</NoteLine>
   <NoteLine></NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Note>
  <ItemName>Subclassing</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>Subclassing</NoteLine>
   <NoteLine>The best way to add additional argument specifications</NoteLine>
   <NoteLine>to this class for the parsing process is through</NoteLine>
   <NoteLine>subclassing.  Create a subclass of this class, override</NoteLine>
   <NoteLine>the correct functions, and everything will work</NoteLine>
   <NoteLine>perfectly.  This class was written with this idea in mind.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Upon subclassing this class, only the following function</NoteLine>
   <NoteLine>must be overridden:</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>AddArgSpecifications</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>This function is called right before processing the</NoteLine>
   <NoteLine>arguments array.  The version in this class adds</NoteLine>
   <NoteLine>specifications for the help, verbose and version flags.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>This function is also where you can specify required</NoteLine>
   <NoteLine>arguments.  Arrange the argument IDs in whatever order</NoteLine>
   <NoteLine>you would like in the requiredArgIDs array.  This array</NoteLine>
   <NoteLine>is automatically expanded when the arguments are parsed.</NoteLine>
   <NoteLine>(If you require an argument with a parcel count of 3,</NoteLine>
   <NoteLine>then include it only once in requiredArgIDs, because</NoteLine>
   <NoteLine>it is expanded automatically right before it is used.)</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>If you would like to amend the built-in specifications</NoteLine>
   <NoteLine>defined in that function, then override that function</NoteLine>
   <NoteLine>and call Super.AddArgSpecifications before anything else.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Alternatively, if you would like to replace the built-in</NoteLine>
   <NoteLine>specifications with all of your own, then override that</NoteLine>
   <NoteLine>function and do not call Super.AddArgSpecifications.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Note>
  <ItemName>License</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>License</NoteLine>
   <NoteLine>This class is licensed as BSD.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Copyright (c) 2009, Andrew Keller</NoteLine>
   <NoteLine>All rights reserved.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Redistribution and use in source and binary forms, with or</NoteLine>
   <NoteLine>without modification, are permitted provided that the following</NoteLine>
   <NoteLine>conditions are met:</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>  Redistributions of source code must retain the above copyright</NoteLine>
   <NoteLine>  notice, this list of conditions and the following disclaimer.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>  Redistributions in binary form must reproduce the above</NoteLine>
   <NoteLine>  copyright notice, this list of conditions and the following</NoteLine>
   <NoteLine>  disclaimer in the documentation and/or other materials provided</NoteLine>
   <NoteLine>  with the distribution.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>  Neither the name of Andrew Keller nor the names of its</NoteLine>
   <NoteLine>  contributors may be used to endorse or promote products derived</NoteLine>
   <NoteLine>  from this software without specific prior written permission.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</NoteLine>
   <NoteLine>"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</NoteLine>
   <NoteLine>LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS</NoteLine>
   <NoteLine>FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE</NoteLine>
   <NoteLine>COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,</NoteLine>
   <NoteLine>INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,</NoteLine>
   <NoteLine>BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;</NoteLine>
   <NoteLine>LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</NoteLine>
   <NoteLine>CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT</NoteLine>
   <NoteLine>LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN</NoteLine>
   <NoteLine>ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</NoteLine>
   <NoteLine>POSSIBILITY OF SUCH DAMAGE.</NoteLine>
   <NoteLine></NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Note>
  <ItemName>Argument Specifications</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>Argument Specifications</NoteLine>
   <NoteLine>An argument has a handful of properties that define its behavior.</NoteLine>
   <NoteLine>The following is a summary of these properties:</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>id           As String      ID of argument, for internal use only</NoteLine>
   <NoteLine>flags()      As Character   List of flags that can trigger this argument</NoteLine>
   <NoteLine>switches()   As String      List of switches that can trigger this argument</NoteLine>
   <NoteLine>parcelCount  As Integer     Number of parcels required upon this argument being triggered</NoteLine>
   <NoteLine>isArray      As Boolean     See Note 1</NoteLine>
   <NoteLine>isUnbounded  As Boolean     See Note 2</NoteLine>
   <NoteLine>isTerminal   As Boolean     See Note 3</NoteLine>
   <NoteLine>displayName  As String      Display name</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Note 1:  If true, then the function GetRelevantParcels will return an array</NoteLine>
   <NoteLine>         of the last &lt;parcelCount&gt; parcels associated with the given argument.</NoteLine>
   <NoteLine>         Else, GetRelevantParcels returns an array of all parcels associated</NoteLine>
   <NoteLine>         with the given argument.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Note 2:  Any unexpected parcel is associated with the last triggered unbounded</NoteLine>
   <NoteLine>         argument.  If no unbounded arguments have been triggered yet, then</NoteLine>
   <NoteLine>         an UnexpectedArgument error is raised and desequencing stops.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Note 3:  If this argument is triggered, argument processing is terminated</NoteLine>
   <NoteLine>         without causing an error.  Also note that this option does NOT</NoteLine>
   <NoteLine>         respect the parcelCount property, so a terminal argument with a</NoteLine>
   <NoteLine>         parcelCount of 1 is kinda pointless.</NoteLine>
   <NoteLine></NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Note>
  <ItemName>Errors</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>Errors</NoteLine>
   <NoteLine>It may seem appropriate to use exceptions in this class,</NoteLine>
   <NoteLine>but exceptions are not raised.  My reasoning is that</NoteLine>
   <NoteLine>even after realizing there is an error, there are still</NoteLine>
   <NoteLine>cases where you may want to access the arguments that</NoteLine>
   <NoteLine>have successfully been parsed.  Since a try-catch structure</NoteLine>
   <NoteLine>does not easily allow you to retain an object where the</NoteLine>
   <NoteLine>constructor threw an exception, it seems more logical</NoteLine>
   <NoteLine>for this class to not throw exceptions, and rather have</NoteLine>
   <NoteLine>functions for figuring out if errors have occurred.</NoteLine>
   <NoteLine></NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Property>
  <ItemName>myOrigArgs()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>myOrigArgs() As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>myOrigArgs() As String</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>requiredArgIDs()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>requiredArgIDs() As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>requiredArgIDs() As String</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>myLastErrorCode</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>myLastErrorCode As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>myLastErrorCode As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>myLastErrorMsg</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>myLastErrorMsg As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>myLastErrorMsg As String</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>myArgs</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>myArgs As Dictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>myArgs As Dictionary</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>kArgIDHelp</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kArgIDHelp</ItemName>
  <ItemType>0</ItemType>
  <ItemDef>help</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kArgIDVerbose</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kArgIDVerbose</ItemName>
  <ItemType>0</ItemType>
  <ItemDef>verbose</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kErrUndefinedArgID</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kErrUndefinedArgID</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>1</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kErrUndefinedTrigger</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kErrUndefinedTrigger</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>2</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kErrUnexpectedParcel</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kErrUnexpectedParcel</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>3</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kErrMissingParcel</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kErrMissingParcel</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>4</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kErrNone</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kErrNone</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>0</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kArgIDAppVersion</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kArgIDAppVersion</ItemName>
  <ItemType>0</ItemType>
  <ItemDef>appversion</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
</block>
</RBProject>
